a. الدالة المجهولة (Anonymous Function):
الدالة المجهولة هي دالة لا تحمل اسمًا محددًا في البرمجة. تعرف وتستخدم عادة كبنية برمجية لتمريرها كوسيط (معامل) لدوال أخرى أو لتنفيذ سلسلة من العمليات المعقدة. تعد الدوال المجهولة مفيدة عندما يكون لديك عملية صغيرة أو مجموعة من العبارات التي تحتاج إلى تنفيذها مرة واحدة دون الحاجة إلى تعريف دالة مستقلة بأسم محدد.

مثال:
في لغة برمجة مثل JavaScript، يمكن استخدام الدالة المجهولة في مثل هذا السياق:

```javascript
setTimeout(function() {
    console.log("Hello, world!");
}, 1000);
```

في هذا المثال، تم استخدام الدالة المجهولة كمعامل لدالة `setTimeout`، حيث يتم تأخير تنفيذ الشيفرة بمقدار 1000 ميلي ثانية (ثانية واحدة).

b. مُنشئ المصنع (Factory Constructor):
مُنشئ المصنع هو نوع خاص من المُنشئات في البرمجة. يقوم بإنشاء وإرجاع كائنات من نوع معين دون الحاجة إلى استخدام المُنشئ العادي. يتم استخدام مُنشئ المصنع لتوفير طرق بديلة لإنشاء الكائنات وتحسين إدارة الذاكرة وتجنب الاعتماد على المُنشئ القياسي.

مثال:
في لغة برمجة مثل Dart، يمكن استخدام مُنشئ المصنع لإنشاء كائنات بطرق مختلفة. على سبيل المثال:

```dart
class Person {
  String name;
  int age;

  factory Person(String name, int age) {
    if (age < 18) {
      return Child(name, age);
    } else {
      return Adult(name, age);
    }
  }
}

class Child extends Person {
  Child(String name, int age) {
    this.name = name;
    this.age = age;
    print("Child created!");
  }
}

class Adult extends Person {
  Adult(String name, int age) {
    this.name = name;
    this.age = age;
    print("Adult created!");
  }
}

void main() {
  var person1 = Person("John", 12);
  var person2 = Person("Jane", 25);
}
```

في هذا المثال، يتم استخدام مُنشئ المصنع في الفئة `Person` لتحديد نوع الكائن الذي يجب إنشاؤه استنادًا إلى العمر المعطى. يتم إنشاء كائن `Person` من نوع `Child` إذا كان العمر أقل من 18 سنة، وإلا فإنه يتم إنشاء كائن من نوع `Adult`.

c. المُنشئ المسمى (Named Constructor):
المُنشئ المسمى هو نوع آخر من المُنشئات في البرمجة. يُستخدم لإنشاء كائنات باستخدام واجهة مختلفة أو طرق مختلفة للإنشاء. يتم تعريف المُنشئ المسمى بواسطة اسم محدد ويمكن استدعاؤه باستخدام هذا الاسم لإنشاء كائنات.

مثال:
في لغة برمجة مثل Dart، يمكن استخدام المُنشئ المسمى لإنشاء كائنات بطرق مختلفة. على سبيل المثال:

```dart
class Rectangle {
  int width;
  int height;

  Rectangle(this.width, this.height);

  Rectangle.square(int sideLength) {
    width = sideLength;
    height = sideLength;
  }
}

void main() {
  var rectangle1 = Rectangle(10, 20);
  var rectangle2 = Rectangle.square(15);
}
```

في هذا المثال، يتم استخدام المُنشئ `Rectangle` العادي لإنشاء مستطيل بالعرض والارتفاع المحددين. بالمقابل، يتم استخدام المُنشئ المسمى `Rectangle.square` لإنشاء مستطيل مربع بناءً على طول الضلع المحدد.

d. المُنشئ الثابت (Const Constructor):
المُنشئ الثابت هو نوع خاص من المُنشئات في البرمجة. يُستخدم لإنشاء كائنات ثابتة (غير قابلة للتغيير) أثناء وقت الترجمة أو التشغيل. يتم تعيين القيمة الثابتة للكائن أثناء تعريفه ولا يمكن تغييرها فيما بعد.

مثال:
في لغة برمجة مثل Dart، يمكن استخدام المُنشئ الثابت لإنشاء كائنات ثابتة. على سبيل المثال:

```dart
class Circle {
  final double radius;

  const Circle(this.radius);
}

void main() {
  const circle = Circle(5.0);
  // circle.radius = 10.0; // لا يُسمح بتغيير القيمة
}
```

في هذا المثال، يتم استخدام المُنشئ الثابت `Circle` لإنشاء كائن دائرة ثابتة بناءً على النصف قطر المحدد. يتم تعيين قيمة النصف قطر أثناء إنشاء الكائن ولا يمكن تغييرها فيما بعد.